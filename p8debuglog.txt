 gcc -g p8final.c
 gdb a.out
GNU gdb (Ubuntu 8.1.1-0ubuntu1) 8.1.1
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from a.out...done.
(gdb) b main
Breakpoint 1 at 0xaf9: file p8final.c, line 64.
(gdb) r
Starting program: /home/runner/IA2-Test1-Session2/a.out 
warning: Error disabling address space randomization: Operation not permitted

Breakpoint 1, main () at p8final.c:64
64      {
(gdb) n
65        int n=input_n();
(gdb) s
input_n () at p8final.c:9
9   {
(gdb) n
11    printf("how many triangles will you enter\n");
(gdb) n
how many triangles will you enter
12    scanf("%d",&n);
(gdb) n
3
13    return n;
(gdb) n
14  }
(gdb) n
main () at p8final.c:66
66        Triangle tris[n];
(gdb) s
67        input_n_triangles(n,tris);
(gdb) n
enter the base and altitude of triangle
2
4
enter the base and altitude of triangle
2
6
enter the base and altitude of triangle
2
8
68        find_areas_n(n,tris);
(gdb) s
find_areas_n (n=3, t=0x7ffe5bab3670) at p8final.c:35
35    for(int i=0;i<n;i++)
(gdb) n
37        find_area(&t[i]);
(gdb) n
35    for(int i=0;i<n;i++)
(gdb) p i
$1 = 0
(gdb) n
37        find_area(&t[i]);
(gdb) p area
No symbol "area" in current context.
(gdb) n
35    for(int i=0;i<n;i++)
(gdb) n
37        find_area(&t[i]);
(gdb) n
35    for(int i=0;i<n;i++)
(gdb) n
39    }
(gdb) n
main () at p8final.c:70
70        small=find_smallest_triangle(n,tris);
(gdb) s
find_smallest_triangle (n=3, t=0x7ffe5bab3670) at p8final.c:43
43    small=t[0];
(gdb) n
45    for(int i=1;i<n;i++)
(gdb) n
47        if(small.area>t[i].area)
(gdb) n
45    for(int i=1;i<n;i++)
(gdb) n
47        if(small.area>t[i].area)
(gdb) n
45    for(int i=1;i<n;i++)
(gdb) n
52      return small;
(gdb) n
54    }
(gdb) n
main () at p8final.c:71
71        output(n,tris,small);
(gdb) s
output (n=3, t=0x7ffe5bab3670, smallest=...) at p8final.c:57
57      for(int i=0;i<n-1;i++)
(gdb) n
59          printf("%f,%f and \n",t[i].base,t[i].altitude);
(gdb) n
2.000000,4.000000 and 
57      for(int i=0;i<n-1;i++)
(gdb) n
59          printf("%f,%f and \n",t[i].base,t[i].altitude);
(gdb) n
2.000000,6.000000 and 
57      for(int i=0;i<n-1;i++)
(gdb) n
61      printf("%f,%f\n is \n triangle with base=%f and altitude=%f having area=%f\n",t[n-1].base,t[n-1].altitude,smallest.base,smallest.altitude,smallest.area);
(gdb) n
2.000000,8.000000
 is 
 triangle with base=2.000000 and altitude=4.000000 having area=4.000000
62      }
(gdb) n
main () at p8final.c:72
72        return 0;
(gdb) n
73        }(gdb) c
Continuing.
[Inferior 1 (process 1900) exited normally]
(gdb) 